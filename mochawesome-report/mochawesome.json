{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2022-02-01T19:40:52.232Z",
    "end": "2022-02-01T19:40:55.222Z",
    "duration": 2990,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "da176337-4055-4d01-9177-7df13768adc7",
      "title": "",
      "fullFile": "cypress/integration/qa-exam-kitchen/problem1_reserve.js",
      "file": "cypress/integration/qa-exam-kitchen/problem1_reserve.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "667fc272-7200-4719-8621-54ab29650bc8",
          "title": "Check \"Make Reservation\" page",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify that populated data are stored in local storage",
              "fullTitle": "Check \"Make Reservation\" page Verify that populated data are stored in local storage",
              "timedOut": null,
              "duration": 2923,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reservationPage = new _reservation_page.default();\ncy.visit('/reserve');\nreservationPage.getNameField().type(this.data.name);\nreservationPage.getEmailField().type(this.data.email);\nreservationPage.getPhoneField().type(this.data.phone);\nreservationPage.getDatePicker().type(this.data.date);\nreservationPage.getTimePicker().type(this.data.time);\nreservationPage.getPersonDropdown().select('2');\nreservationPage.getParkingSwitch().click({\n  force: true\n});\nreservationPage.getMakeReservationButton().click().then(() => {\n  expect(localStorage.getItem('name')).to.equal(this.data.name);\n  expect(localStorage.getItem('email')).to.equal(this.data.email);\n  expect(localStorage.getItem('phone')).to.equal(this.data.phone);\n  expect(localStorage.getItem('date')).to.equal(this.data.date);\n  expect(localStorage.getItem('time')).to.equal(this.data.time);\n  expect(localStorage.getItem('person')).to.equal('2');\n  expect(localStorage.getItem('parking')).to.equal('on');\n});",
              "err": {},
              "uuid": "ab933c06-931f-43f9-8061-61a5981fdc2f",
              "parentUUID": "667fc272-7200-4719-8621-54ab29650bc8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ab933c06-931f-43f9-8061-61a5981fdc2f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2923,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": null,
      "version": "6.0.1"
    }
  }
}